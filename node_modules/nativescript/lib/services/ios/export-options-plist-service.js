"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const temp = require("temp");
const mobileProvisionFinder = require("ios-mobileprovision-finder");
class ExportOptionsPlistService {
    constructor($fs) {
        this.$fs = $fs;
    }
    createDevelopmentExportOptionsPlist(archivePath, projectData, buildConfig) {
        const exportOptionsMethod = this.getExportOptionsMethod(projectData, archivePath);
        const provision = buildConfig.provision || buildConfig.mobileProvisionIdentifier;
        const iCloudContainerEnvironment = buildConfig.iCloudContainerEnvironment;
        let plistTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>method</key>
	<string>${exportOptionsMethod}</string>`;
        if (provision) {
            plistTemplate += `    <key>provisioningProfiles</key>
<dict>
	<key>${projectData.projectIdentifiers.ios}</key>
	<string>${provision}</string>
</dict>`;
        }
        plistTemplate += `
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>`;
        if (iCloudContainerEnvironment) {
            plistTemplate += `
    <key>iCloudContainerEnvironment</key>
    <string>${iCloudContainerEnvironment}</string>`;
        }
        plistTemplate += `
</dict>
</plist>`;
        temp.track();
        const exportOptionsPlistFilePath = temp.path({ prefix: "export-", suffix: ".plist" });
        this.$fs.writeFile(exportOptionsPlistFilePath, plistTemplate);
        const exportFileDir = path.resolve(path.dirname(archivePath));
        const exportFilePath = path.join(exportFileDir, projectData.projectName + ".ipa");
        return { exportFileDir, exportFilePath, exportOptionsPlistFilePath };
    }
    createDistributionExportOptionsPlist(archivePath, projectData, buildConfig) {
        const provision = buildConfig.provision || buildConfig.mobileProvisionIdentifier;
        const teamId = buildConfig.teamId;
        let plistTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
`;
        if (teamId) {
            plistTemplate += `    <key>teamID</key>
    <string>${teamId}</string>
`;
        }
        if (provision) {
            plistTemplate += `    <key>provisioningProfiles</key>
    <dict>
        <key>${projectData.projectIdentifiers.ios}</key>
        <string>${provision}</string>
    </dict>`;
        }
        plistTemplate += `    <key>method</key>
    <string>app-store</string>
    <key>uploadBitcode</key>
    <false/>
    <key>compileBitcode</key>
    <false/>
    <key>uploadSymbols</key>
    <false/>
</dict>
</plist>`;
        temp.track();
        const exportOptionsPlistFilePath = temp.path({ prefix: "export-", suffix: ".plist" });
        this.$fs.writeFile(exportOptionsPlistFilePath, plistTemplate);
        const exportFileDir = path.resolve(path.dirname(archivePath));
        const exportFilePath = path.join(exportFileDir, projectData.projectName + ".ipa");
        return { exportFileDir, exportFilePath, exportOptionsPlistFilePath };
    }
    getExportOptionsMethod(projectData, archivePath) {
        const embeddedMobileProvisionPath = path.join(archivePath, 'Products', 'Applications', `${projectData.projectName}.app`, "embedded.mobileprovision");
        const provision = mobileProvisionFinder.provision.readFromFile(embeddedMobileProvisionPath);
        return {
            "Development": "development",
            "AdHoc": "ad-hoc",
            "Distribution": "app-store",
            "Enterprise": "enterprise"
        }[provision.Type];
    }
}
exports.ExportOptionsPlistService = ExportOptionsPlistService;
$injector.register("exportOptionsPlistService", ExportOptionsPlistService);
