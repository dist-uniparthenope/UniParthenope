import { Length, View } from 'tns-core-modules/ui/core/view';
import { AccordionBase } from './accordion.common';
export declare const ITEMTAP = "itemTap";
export declare class Accordion extends AccordionBase {
    private _preparingItemHeaderCell;
    private _preparingItemContentCell;
    private _preparingHeaderCell;
    private _preparingFooterCell;
    _isDataDirty: boolean;
    updateNativeItems(oldItems: any, newItems: any): void;
    _expandedViews: Map<any, any>;
    _indexSet: NSMutableIndexSet;
    private _itemContentHeights;
    private _itemHeaderHeights;
    private _headerHeights;
    private _footerHeights;
    private _ios;
    private _accordion;
    widthMeasureSpec: number;
    heightMeasureSpec: number;
    nativeViewProtected: UITableViewImpl;
    _dataSource: AccordionDataSource;
    _delegate: any;
    private _map;
    private _mapItemHeader;
    private _mapItemContent;
    private _mapHeader;
    private _mapFooter;
    constructor();
    createNativeView(): UITableViewImpl;
    estimatedItemHeaderRowHeight: number;
    estimatedItemContentRowHeight: number;
    estimatedHeaderRowHeight: number;
    estimatedFooterRowHeight: number;
    initNativeView(): void;
    onLoaded(): void;
    onUnloaded(): void;
    getItemHeaderHeight(index: number): number;
    setItemHeaderHeight(index: number, value: number): void;
    getItemContentHeight(index: number): number;
    setItemContentHeight(index: number, value: number): void;
    getHeaderHeight(index: number): number;
    setHeaderHeight(index: number, value: number): void;
    getFooterHeight(index: number): number;
    setFooterHeight(index: number, value: number): void;
    disposeNativeView(): void;
    _setNativeClipToBounds(): void;
    readonly ios: UITableViewImpl;
    refresh(): void;
    _selectedIndexesUpdatedFromNative(newIndexes: any): void;
    scrollToIndex(index: number): void;
    requestLayout(): void;
    measure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    onLayout(left: number, top: number, right: number, bottom: number): void;
    onMeasure(widthMeasureSpec: number, heightMeasureSpec: number): void;
    private _layoutItemHeaderCell;
    private _layoutHeaderCell;
    private _layoutItemContentCell;
    private _layoutFooterCell;
    _prepareItemHeaderCell(cell: AccordionItemHeaderCell, indexPath: NSIndexPath): number;
    _prepareItemContentCell(cell: AccordionItemContentCell, indexPath: NSIndexPath): number;
    _prepareHeaderCell(cell: AccordionHeaderCell, indexPath: NSIndexPath): number;
    _prepareFooterCell(cell: AccordionFooterCell, indexPath: NSIndexPath): number;
    _removeItemHeaderContainer(header: AccordionItemHeaderCell): void;
    _removeItemContentContainer(cell: AccordionItemContentCell): void;
    _removeHeaderContainer(cell: AccordionHeaderCell): void;
    _removeFooterContainer(cell: AccordionFooterCell): void;
    readonly _childrenCount: number;
    eachChildView(callback: (child: View) => boolean): void;
    updateNativeIndexes(oldIndexes: any, newIndexes: any): void;
    expandAll(): void;
    collapseAll(): void;
    collapseItem(index: number): void;
    expandItem(index: number): void;
    itemIsExpanded(index: number): boolean;
    itemExpanded(index: number): void;
    itemCollapsed(index: number): void;
    _onHeaderRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onItemHeaderRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onItemContentRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onFooterRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
}
export declare class AccordionItemHeaderCell extends UITableViewCell {
    static initWithEmptyBackground(): AccordionItemHeaderCell;
    initWithStyleReuseIdentifier(style: UITableViewCellStyle, reuseIdentifier: string): this;
    willMoveToSuperview(newSuperview: UIView): void;
    readonly view: View;
    owner: WeakRef<View>;
}
export declare class AccordionItemContentCell extends UITableViewCell {
    static initWithEmptyBackground(): AccordionItemContentCell;
    initWithStyleReuseIdentifier(style: UITableViewCellStyle, reuseIdentifier: string): this;
    willMoveToSuperview(newSuperview: UIView): void;
    readonly view: View;
    owner: WeakRef<View>;
}
export declare class AccordionHeaderCell extends UITableViewCell {
    static initWithEmptyBackground(): AccordionHeaderCell;
    initWithStyleReuseIdentifier(style: UITableViewCellStyle, reuseIdentifier: string): this;
    willMoveToSuperview(newSuperview: UIView): void;
    readonly view: View;
    owner: WeakRef<View>;
}
export declare class AccordionFooterCell extends UITableViewCell {
    static initWithEmptyBackground(): AccordionFooterCell;
    initWithStyleReuseIdentifier(style: UITableViewCellStyle, reuseIdentifier: string): this;
    willMoveToSuperview(newSuperview: UIView): void;
    readonly view: View;
    owner: WeakRef<View>;
}
export declare class AccordionDataSource extends NSObject implements UITableViewDataSource {
    static ObjCProtocols: {
        prototype: UITableViewDataSource;
    }[];
    private _owner;
    static initWithOwner(owner: WeakRef<Accordion>): AccordionDataSource;
    tableViewNumberOfRowsInSection(tableView: UITableView, section: number): any;
    numberOfSectionsInTableView(tableView: any): number;
    tableViewCellForRowAtIndexPath(tableView: UITableView, indexPath: NSIndexPath): AccordionItemContentCell | AccordionItemHeaderCell | AccordionHeaderCell | AccordionFooterCell;
}
export declare class UITableViewRowHeightDelegateImpl extends NSObject implements UITableViewDelegate {
    static ObjCProtocols: {
        prototype: UITableViewDelegate;
    }[];
    private _owner;
    static initWithOwner(owner: WeakRef<Accordion>): UITableViewRowHeightDelegateImpl;
    tableViewWillDisplayCellForRowAtIndexPath(tableView: UITableView, cell: UITableViewCell, indexPath: NSIndexPath): void;
    tableViewWillSelectRowAtIndexPath(tableView: UITableView, indexPath: NSIndexPath): NSIndexPath;
    tableViewDidSelectRowAtIndexPath(tableView: UITableView, indexPath: NSIndexPath): NSIndexPath;
    tableViewHeightForRowAtIndexPath(tableView: UITableViewImpl, indexPath: NSIndexPath): number;
    tableViewHeightForFooterInSection?(tableView: UITableView, section: number): number;
    tableViewHeightForHeaderInSection?(tableView: UITableView, section: number): number;
}
export declare class UITableViewDelegateImpl extends NSObject implements UITableViewDelegate {
    static ObjCProtocols: {
        prototype: UITableViewDelegate;
    }[];
    private _owner;
    private _measureItemHeaderMap;
    private _measureItemContentMap;
    private _measureHeaderMap;
    private _measureFooterMap;
    static initWithOwner(owner: WeakRef<Accordion>): UITableViewDelegateImpl;
    tableViewHeightForRowAtIndexPath(tableView: UITableViewImpl, indexPath: NSIndexPath): number;
    tableViewWillSelectRowAtIndexPath(tableView: UITableView, indexPath: NSIndexPath): NSIndexPath;
    tableViewDidSelectRowAtIndexPath(tableView: UITableView, indexPath: NSIndexPath): NSIndexPath;
    tableViewHeightForFooterInSection?(tableView: UITableView, section: number): number;
    tableViewHeightForHeaderInSection?(tableView: UITableView, section: number): number;
}
export declare class UITableViewImpl extends UITableView {
    owner: WeakRef<Accordion>;
    estimatedItemHeaderRowHeight: number;
    estimatedItemContentRowHeight: number;
    estimatedHeaderRowHeight: number;
    estimatedFooterRowHeight: number;
    static initWithOwner(owner: WeakRef<Accordion>): UITableViewImpl;
}
