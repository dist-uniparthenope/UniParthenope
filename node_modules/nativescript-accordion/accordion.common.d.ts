import { CoercibleProperty, CssProperty, KeyedTemplate, Length, Property, Style, Template, View, ContainerView } from 'tns-core-modules/ui/core/view';
import { ChangedData } from 'tns-core-modules/data/observable-array';
export declare module knownCollections {
    const items = "items";
}
export declare module knownTemplates {
    const itemHeaderTemplate = "itemHeaderTemplate";
    const itemContentTemplate = "itemContentTemplate";
    const headerTemplate = "headerTemplate";
    const footerTemplate = "footerTemplate";
}
export declare module knownMultiTemplates {
    const itemHeaderTemplates = "itemHeaderTemplates";
    const itemContentTemplates = "itemContentTemplates";
    const headerTemplates = "headerTemplates";
    const footerTemplates = "footerTemplates";
}
export interface ItemsSource {
    length: number;
    getItem(index: number): any;
}
export declare abstract class AccordionBase extends ContainerView {
    static headerLoadingEvent: string;
    static footerLoadingEvent: string;
    static itemHeaderLoadingEvent: string;
    static itemContentLoadingEvent: string;
    static itemHeaderTapEvent: string;
    static itemContentTapEvent: string;
    static loadMoreItemsEvent: string;
    private _allowMultiple;
    _effectiveHeaderRowHeight: number;
    _effectiveItemHeaderRowHeight: number;
    _effectiveItemContentRowHeight: number;
    _effectiveFooterRowHeight: number;
    headerRowHeight: Length;
    itemHeaderRowHeight: Length;
    itemContentRowHeight: Length;
    footerRowHeight: Length;
    iosEstimatedHeaderRowHeight: Length;
    iosEstimatedItemHeaderRowHeight: Length;
    iosEstimatedItemContentRowHeight: Length;
    iosEstimatedFooterRowHeight: Length;
    static selectedIndexesChangedEvent: string;
    static knownFunctions: string[];
    items: any[] | ItemsSource;
    itemHeaderTemplate: string | Template;
    itemHeaderTemplates: string | Array<KeyedTemplate>;
    itemContentTemplate: string | Template;
    itemContentTemplates: string | Array<KeyedTemplate>;
    headerTemplate: string | Template;
    headerTemplates: string | Array<KeyedTemplate>;
    footerTemplate: string | Template;
    footerTemplates: string | Array<KeyedTemplate>;
    selectedIndexes: any;
    childItems: string;
    private _itemIdGenerator;
    itemIdGenerator: (item: any, index: number, items: any) => number;
    private _childIdGenerator;
    childIdGenerator: (item: any, index: number, childIndex: number, items: any) => number;
    private _headerTemplateSelector;
    private _headerTemplateSelectorBindable;
    _defaultHeaderTemplate: KeyedTemplate;
    _headerTemplatesInternal: KeyedTemplate[];
    private _itemHeaderTemplateSelector;
    private _itemHeaderTemplateSelectorBindable;
    _defaultItemHeaderTemplate: KeyedTemplate;
    _itemHeaderTemplatesInternal: KeyedTemplate[];
    private _itemContentTemplateSelector;
    private _itemContentTemplateSelectorBindable;
    _defaultItemContentTemplate: KeyedTemplate;
    _itemContentTemplatesInternal: KeyedTemplate[];
    private _footerTemplateSelector;
    private _footerTemplateSelectorBindable;
    _defaultFooterTemplate: KeyedTemplate;
    _footerTemplatesInternal: KeyedTemplate[];
    headerTemplateSelector: string | ((item: any, index: number, items: any) => string);
    itemHeaderTemplateSelector: string | ((item: any, index: number, items: any) => string);
    itemContentTemplateSelector: string | ((item: any, parentIndex: number, index: number, items: any) => string);
    footerTemplateSelector: string | ((item: any, index: number, items: any) => string);
    _getHeaderTemplate(index: number): KeyedTemplate;
    _getItemHeaderTemplate(index: number): KeyedTemplate;
    _getHasHeader: () => boolean;
    _getHasFooter: () => boolean;
    _getItemContentTemplate(index: number, childIndex: number): KeyedTemplate;
    _getFooterTemplate(index: number): KeyedTemplate;
    _getDefaultHeaderContent(index: number): View;
    _getDefaultItemHeaderContent(index: number): View;
    _getDefaultItemContentContent(index: number, childIndex: number): View;
    _getDefaultFooterContent(index: number): View;
    _prepareHeaderItem(item: View, index: number): void;
    _prepareItemHeader(item: View, index: number): void;
    _prepareItemContent(item: View, index: number, childIndex: number): void;
    _prepareFooterItem(item: View, index: number): void;
    _onHeaderRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onItemHeaderRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onItemContentRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    _onFooterRowHeightPropertyChanged(oldValue: Length, newValue: Length): void;
    protected updateEffectiveItemHeaderRowHeight(): void;
    protected updateEffectiveItemContentRowHeight(): void;
    _getParentData(parentIndex: number): any;
    _getChildData(parentIndex: number, childIndex: number): any;
    allowMultiple: boolean;
    separatorColor: any;
    abstract refresh(): void;
    _onItemsChanged(args: ChangedData<any>): void;
    abstract updateNativeItems(oldItems: Array<any>, newItems: Array<any>): void;
    abstract updateNativeIndexes(oldData: any, newData: any): void;
    abstract itemCollapsed(index: number): void;
    abstract itemExpanded(index: number): void;
    abstract itemIsExpanded(index: number): boolean;
    abstract expandAll(): void;
    abstract collapseAll(): void;
    abstract expandItem(index: number): void;
    abstract collapseItem(index: number): void;
}
export declare const separatorColorProperty: CssProperty<Style, string>;
export declare const headerTemplateProperty: Property<AccordionBase, string>;
export declare const headerTemplatesProperty: Property<AccordionBase, string | KeyedTemplate[]>;
export declare const itemHeaderTemplateProperty: Property<AccordionBase, string>;
export declare const itemHeaderTemplatesProperty: Property<AccordionBase, string | KeyedTemplate[]>;
export declare const itemContentTemplateProperty: Property<AccordionBase, string>;
export declare const itemContentTemplatesProperty: Property<AccordionBase, string | KeyedTemplate[]>;
export declare const footerTemplateProperty: Property<AccordionBase, string>;
export declare const footerTemplatesProperty: Property<AccordionBase, string | KeyedTemplate[]>;
export declare const itemsProperty: Property<AccordionBase, any>;
export declare const selectedIndexesProperty: Property<AccordionBase, any>;
export declare const headerRowHeightProperty: CoercibleProperty<AccordionBase, Length>;
export declare const itemHeaderRowHeightProperty: CoercibleProperty<AccordionBase, Length>;
export declare const itemContentRowHeightProperty: CoercibleProperty<AccordionBase, Length>;
export declare const footerRowHeightProperty: CoercibleProperty<AccordionBase, Length>;
export declare const iosEstimatedHeaderRowHeightProperty: Property<AccordionBase, Length>;
export declare const iosEstimatedItemHeaderRowHeightProperty: Property<AccordionBase, Length>;
export declare const iosEstimatedItemContentRowHeightProperty: Property<AccordionBase, Length>;
export declare const iosEstimatedFooterRowHeightProperty: Property<AccordionBase, Length>;
