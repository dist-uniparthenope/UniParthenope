"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var view_1 = require("tns-core-modules/ui/core/view");
var common = require("./accordion.common");
var accordion_common_1 = require("./accordion.common");
var color_1 = require("tns-core-modules/color");
var utils = require("tns-core-modules/utils/utils");
var profiling_1 = require("tns-core-modules/profiling");
var observable_1 = require("tns-core-modules/data/observable");
var proxy_view_container_1 = require("tns-core-modules/ui/proxy-view-container");
var stack_layout_1 = require("tns-core-modules/ui/layouts/stack-layout");
exports.ITEMTAP = 'itemTap';
var NG_VIEW = '_ngViewRef';
global.moduleMerge(common, exports);
var DEFAULT_HEIGHT = 44;
var infinity = utils.layout.makeMeasureSpec(0, utils.layout.UNSPECIFIED);
var majorVersion = utils.ios.MajorVersion;
function notifyForItemAtIndex(owner, nativeView, view, eventName, indexPath) {
    var args = {
        eventName: eventName,
        object: owner,
        index: indexPath.section,
        childIndex: indexPath.row,
        view: view,
        ios: nativeView,
        android: undefined
    };
    owner.notify(args);
    return args;
}
function notifyForHeaderOrFooterAtIndex(owner, nativeView, view, eventName, parentIndex) {
    var args = {
        eventName: eventName,
        object: owner,
        index: parentIndex,
        view: view,
        ios: nativeView,
        android: undefined
    };
    owner.notify(args);
    return args;
}
var DefaultAccordionHeaderViewHeight = 44.0;
var Accordion = (function (_super) {
    __extends(Accordion, _super);
    function Accordion() {
        var _this = _super.call(this) || this;
        _this.estimatedItemHeaderRowHeight = DEFAULT_HEIGHT;
        _this.estimatedItemContentRowHeight = DEFAULT_HEIGHT;
        _this.estimatedHeaderRowHeight = DEFAULT_HEIGHT;
        _this.estimatedFooterRowHeight = DEFAULT_HEIGHT;
        _this._itemContentHeights = [];
        _this._itemHeaderHeights = [];
        _this._headerHeights = [];
        _this._footerHeights = [];
        _this._map = new Map();
        _this._mapItemContent = new Map();
        _this._mapItemHeader = new Map();
        _this._mapHeader = new Map();
        _this._mapFooter = new Map();
        return _this;
    }
    Accordion.prototype.updateNativeItems = function (oldItems, newItems) {
        this._ios.reloadData();
    };
    Accordion.prototype.createNativeView = function () {
        return UITableViewImpl.initWithOwner(new WeakRef(this));
    };
    Accordion.prototype.initNativeView = function () {
        _super.prototype.initNativeView.call(this);
        var nativeView = this.nativeViewProtected;
        nativeView.registerClassForCellReuseIdentifier(AccordionItemHeaderCell.class(), this._defaultItemHeaderTemplate.key);
        nativeView.registerClassForCellReuseIdentifier(AccordionItemContentCell.class(), this._defaultItemContentTemplate.key);
        nativeView.registerClassForCellReuseIdentifier(AccordionHeaderCell.class(), this._defaultHeaderTemplate.key);
        nativeView.registerClassForCellReuseIdentifier(AccordionFooterCell.class(), this._defaultFooterTemplate.key);
        nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
        nativeView.rowHeight = UITableViewAutomaticDimension;
        this.ios.separatorColor = UIColor.clearColor;
        this.ios.tableFooterView = UIView.new();
        if (this.separatorColor) {
            this.ios.separatorColor = new color_1.Color(this.separatorColor).ios;
        }
        this._dataSource = AccordionDataSource.initWithOwner(new WeakRef(this));
        this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
        this._setNativeClipToBounds();
        this._expandedViews = new Map();
        this._indexSet = NSMutableIndexSet.alloc().init();
    };
    Accordion.prototype.onLoaded = function () {
        _super.prototype.onLoaded.call(this);
        if (this._isDataDirty) {
            this.requestLayout();
            this.refresh();
        }
        this.ios.dataSource = this._dataSource;
        this.ios.delegate = this._delegate;
    };
    Accordion.prototype.onUnloaded = function () {
        this.ios.delegate = null;
        _super.prototype.onUnloaded.call(this);
    };
    Accordion.prototype.getItemHeaderHeight = function (index) {
        return this._itemHeaderHeights[index];
    };
    Accordion.prototype.setItemHeaderHeight = function (index, value) {
        this._itemHeaderHeights[index] = value;
    };
    Accordion.prototype.getItemContentHeight = function (index) {
        return this._itemContentHeights[index];
    };
    Accordion.prototype.setItemContentHeight = function (index, value) {
        this._itemContentHeights[index] = value;
    };
    Accordion.prototype.getHeaderHeight = function (index) {
        return this._headerHeights[index];
    };
    Accordion.prototype.setHeaderHeight = function (index, value) {
        this._headerHeights[index] = value;
    };
    Accordion.prototype.getFooterHeight = function (index) {
        return this._footerHeights[index];
    };
    Accordion.prototype.setFooterHeight = function (index, value) {
        this._footerHeights[index] = value;
    };
    Accordion.prototype.disposeNativeView = function () {
        this.ios.delegate = null;
        if (this._indexSet) {
            this._indexSet.removeAllIndexes();
        }
    };
    Accordion.prototype._setNativeClipToBounds = function () {
        this.ios.clipsToBounds = true;
    };
    Object.defineProperty(Accordion.prototype, "ios", {
        get: function () {
            return this.nativeViewProtected;
        },
        enumerable: true,
        configurable: true
    });
    Accordion.prototype.refresh = function () {
        this._map.forEach(function (view, nativeView, map) {
            if (!(view.bindingContext instanceof observable_1.Observable)) {
                view.bindingContext = null;
            }
        });
        this._mapItemContent.forEach(function (view, nativeView, map) {
            if (!(view.bindingContext instanceof observable_1.Observable)) {
                view.bindingContext = null;
            }
        });
        this._mapItemHeader.forEach(function (view, nativeView, map) {
            if (!(view.bindingContext instanceof observable_1.Observable)) {
                view.bindingContext = null;
            }
        });
        this._mapHeader.forEach(function (view, nativeView, map) {
            if (!(view.bindingContext instanceof observable_1.Observable)) {
                view.bindingContext = null;
            }
        });
        this._mapFooter.forEach(function (view, nativeView, map) {
            if (!(view.bindingContext instanceof observable_1.Observable)) {
                view.bindingContext = null;
            }
        });
        if (this.isLoaded) {
            this.ios.reloadData();
            this.requestLayout();
            this._isDataDirty = false;
        }
        else {
            this._isDataDirty = true;
        }
    };
    Accordion.prototype._selectedIndexesUpdatedFromNative = function (newIndexes) {
        accordion_common_1.selectedIndexesProperty.nativeValueChange(this, newIndexes);
    };
    Accordion.prototype.scrollToIndex = function (index) {
        if (this.ios) {
            this.ios.scrollToRowAtIndexPathAtScrollPositionAnimated(NSIndexPath.indexPathForItemInSection(index, 0), 1, false);
        }
    };
    Accordion.prototype.requestLayout = function () {
        if (!this._preparingItemHeaderCell || !this._preparingItemContentCell || !this._preparingFooterCell || !this._preparingHeaderCell) {
            _super.prototype.requestLayout.call(this);
        }
    };
    Accordion.prototype.measure = function (widthMeasureSpec, heightMeasureSpec) {
        this.widthMeasureSpec = widthMeasureSpec;
        var changed = this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
        _super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
        if (changed) {
            this.ios.reloadData();
        }
    };
    Accordion.prototype.onLayout = function (left, top, right, bottom) {
        var _this = this;
        _super.prototype.onLayout.call(this, left, top, right, bottom);
        this._mapItemHeader.forEach(function (childView, accordionHeader) {
            var rowHeight = _this._effectiveItemHeaderRowHeight;
            var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);
            if (cellHeight) {
                var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
                view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
            }
        });
        this._map.forEach(function (childView, accordionCell) {
            var rowHeight = _this._effectiveItemContentRowHeight;
            var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemContentHeight(parseInt("" + (childView._accordionItemIndex + 1) + (childView._accordionChildItemIndex - 1 - (_this._getHasHeader() ? 1 : 0))));
            if (cellHeight) {
                var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
                view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
            }
        });
        this._mapHeader.forEach(function (childView, accordionHeaderCell) {
            var rowHeight = _this._effectiveHeaderRowHeight;
            var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);
            if (cellHeight) {
                var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
                view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
            }
        });
        this._mapFooter.forEach(function (childView, accordionFooterCell) {
            var rowHeight = _this._effectiveFooterRowHeight;
            var cellHeight = rowHeight > 0 ? rowHeight : _this.getItemHeaderHeight(childView._accordionItemIndex);
            if (cellHeight) {
                var width = view_1.layout.getMeasureSpecSize(_this.widthMeasureSpec);
                view_1.View.layoutChild(_this, childView, 0, 0, width, cellHeight);
            }
        });
    };
    Accordion.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
        var _this = this;
        _super.prototype.onMeasure.call(this, widthMeasureSpec, heightMeasureSpec);
        this._map.forEach(function (childView, accordionCell) {
            view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
        });
        this._mapItemHeader.forEach(function (childView, accordionHeader) {
            view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
        });
        this._mapItemContent.forEach(function (childView, accordionCell) {
            view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
        });
        this._mapHeader.forEach(function (childView, accordionHeaderCell) {
            view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
        });
        this._mapFooter.forEach(function (childView, accordionFooterCell) {
            view_1.View.measureChild(_this, childView, childView._currentWidthMeasureSpec, childView._currentHeightMeasureSpec);
        });
    };
    Accordion.prototype._layoutItemHeaderCell = function (cellView, indexPath) {
        if (cellView) {
            var rowHeight = this._effectiveItemHeaderRowHeight;
            var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
            var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
            var height = measuredSize.measuredHeight;
            this.setItemHeaderHeight(indexPath.section, height);
            return height;
        }
        return this.ios.estimatedItemHeaderRowHeight;
    };
    Accordion.prototype._layoutHeaderCell = function (cellView, indexPath) {
        if (cellView) {
            var rowHeight = this._effectiveHeaderRowHeight;
            var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
            var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
            var height = measuredSize.measuredHeight;
            this.setHeaderHeight(indexPath.section, height);
            return height;
        }
        return this.ios.estimatedHeaderRowHeight;
    };
    Accordion.prototype._layoutItemContentCell = function (cellView, indexPath) {
        if (cellView) {
            var rowHeight = this._effectiveItemContentRowHeight;
            var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
            var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
            var height = measuredSize.measuredHeight;
            this.setItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (this._getHasHeader() ? 1 : 0))), height);
            return height;
        }
        return this.ios.estimatedItemContentRowHeight;
    };
    Accordion.prototype._layoutFooterCell = function (cellView, indexPath) {
        if (cellView) {
            var rowHeight = this._effectiveFooterRowHeight;
            var heightMeasureSpec = rowHeight >= 0 ? view_1.layout.makeMeasureSpec(rowHeight, view_1.layout.EXACTLY) : infinity;
            var measuredSize = view_1.View.measureChild(this, cellView, this.widthMeasureSpec, heightMeasureSpec);
            var height = measuredSize.measuredHeight;
            this.setFooterHeight(indexPath.section, height);
            return height;
        }
        return this.ios.estimatedFooterRowHeight;
    };
    Accordion.prototype._prepareItemHeaderCell = function (cell, indexPath) {
        cell.selectionStyle = 0;
        var cellHeight;
        try {
            this._preparingItemHeaderCell = true;
            var view = cell.view;
            if (!view) {
                view = this._getItemHeaderTemplate(indexPath.section).createView();
            }
            var args = {
                eventName: accordion_common_1.AccordionBase.itemHeaderLoadingEvent,
                object: this,
                index: indexPath.section,
                view: view,
                ios: null,
                android: undefined
            };
            this.notify(args);
            view = args.view || this._getDefaultItemHeaderContent(indexPath.section);
            if (view instanceof proxy_view_container_1.ProxyViewContainer) {
                var sp = new stack_layout_1.StackLayout();
                sp.addChild(view);
                view = sp;
            }
            if (!cell.view) {
                cell.owner = new WeakRef(view);
            }
            else if (cell.view !== view) {
                this._removeItemHeaderContainer(cell);
                cell.view.nativeViewProtected.removeFromSuperview();
                cell.owner = new WeakRef(view);
            }
            this._prepareItemHeader(view, indexPath.section);
            view._accordionItemIndex = indexPath.section;
            this._mapItemHeader.set(cell, view);
            if (view && !view.parent) {
                this._addView(view);
                cell.contentView.addSubview(view.nativeViewProtected);
            }
            cellHeight = this._layoutItemHeaderCell(view, indexPath);
        }
        finally {
            this._preparingItemHeaderCell = false;
        }
        return cellHeight;
    };
    Accordion.prototype._prepareItemContentCell = function (cell, indexPath) {
        var cellHeight;
        try {
            this._preparingItemContentCell = true;
            var view = cell.view;
            if (!view) {
                view = this._getItemContentTemplate(indexPath.section, indexPath.row).createView();
            }
            var args = {
                eventName: accordion_common_1.AccordionBase.itemContentLoadingEvent,
                object: this,
                index: indexPath.section,
                childIndex: (indexPath.row - (1 + (this._getHasHeader() ? 1 : 0))),
                view: view,
                ios: null,
                android: undefined
            };
            this.notify(args);
            view = args.view || this._getDefaultItemContentContent(indexPath.section, indexPath.row);
            if (view instanceof proxy_view_container_1.ProxyViewContainer) {
                var sp = new stack_layout_1.StackLayout();
                sp.addChild(view);
                view = sp;
            }
            if (!cell.view) {
                cell.owner = new WeakRef(view);
            }
            else if (cell.view !== view) {
                this._removeItemContentContainer(cell);
                cell.view.nativeViewProtected.removeFromSuperview();
                cell.owner = new WeakRef(view);
            }
            this._prepareItemContent(view, indexPath.section, indexPath.row);
            view._accordionChildItemIndex = indexPath.row;
            view._accordionItemIndex = indexPath.section;
            this._map.set(cell, view);
            if (view && !view.parent) {
                this._addView(view);
                cell.contentView.addSubview(view.nativeViewProtected);
            }
            cellHeight = this._layoutItemContentCell(view, indexPath);
        }
        finally {
            this._preparingItemContentCell = false;
        }
        return cellHeight;
    };
    Accordion.prototype._prepareHeaderCell = function (cell, indexPath) {
        var cellHeight;
        try {
            this._preparingHeaderCell = true;
            var view = cell.view;
            if (!view) {
                view = this._getHeaderTemplate(indexPath.section).createView();
            }
            var args = {
                eventName: accordion_common_1.AccordionBase.footerLoadingEvent,
                object: this,
                index: indexPath.section,
                view: view,
                ios: null,
                android: undefined
            };
            this.notify(args);
            view = args.view || this._getDefaultHeaderContent(indexPath.row);
            if (view instanceof proxy_view_container_1.ProxyViewContainer) {
                var sp = new stack_layout_1.StackLayout();
                sp.addChild(view);
                view = sp;
            }
            if (!cell.view) {
                cell.owner = new WeakRef(view);
            }
            else if (cell.view !== view) {
                this._removeHeaderContainer(cell);
                cell.view.nativeViewProtected.removeFromSuperview();
                cell.owner = new WeakRef(view);
            }
            this._prepareItemHeader(view, indexPath.section);
            view._accordionChildItemIndex = indexPath.section;
            this._map.set(cell, view);
            if (view && !view.parent) {
                this._addView(view);
                cell.contentView.addSubview(view.nativeViewProtected);
            }
            cellHeight = this._layoutHeaderCell(view, indexPath);
        }
        finally {
            this._preparingHeaderCell = false;
        }
        return cellHeight;
    };
    Accordion.prototype._prepareFooterCell = function (cell, indexPath) {
        var cellHeight;
        try {
            this._preparingFooterCell = true;
            var view = cell.view;
            if (!view) {
                view = this._getFooterTemplate(indexPath.section).createView();
            }
            var args = {
                eventName: accordion_common_1.AccordionBase.headerLoadingEvent,
                object: this,
                index: indexPath.section,
                view: view,
                ios: null,
                android: undefined
            };
            this.notify(args);
            view = args.view || this._getDefaultFooterContent(indexPath.section);
            if (view instanceof proxy_view_container_1.ProxyViewContainer) {
                var sp = new stack_layout_1.StackLayout();
                sp.addChild(view);
                view = sp;
            }
            if (!cell.view) {
                cell.owner = new WeakRef(view);
            }
            else if (cell.view !== view) {
                this._removeFooterContainer(cell);
                cell.view.nativeViewProtected.removeFromSuperview();
                cell.owner = new WeakRef(view);
            }
            this._prepareFooterItem(view, indexPath.section);
            view._accordionChildItemIndex = indexPath.section;
            this._map.set(cell, view);
            if (view && !view.parent) {
                this._addView(view);
                cell.contentView.addSubview(view.nativeViewProtected);
            }
            cellHeight = this._layoutFooterCell(view, indexPath);
        }
        finally {
            this._preparingFooterCell = false;
        }
        return cellHeight;
    };
    Accordion.prototype._removeItemHeaderContainer = function (header) {
        var view = header.view;
        if (!(view.parent instanceof Accordion)) {
            this._removeView(view.parent);
        }
        var preparing = this._preparingItemHeaderCell;
        this._preparingItemHeaderCell = true;
        view.parent._removeView(view);
        view._accordionItemIndex = undefined;
        this._preparingItemHeaderCell = preparing;
        this._mapItemHeader.delete(header);
    };
    Accordion.prototype._removeItemContentContainer = function (cell) {
        var view = cell.view;
        if (!(view.parent instanceof Accordion)) {
            this._removeView(view.parent);
        }
        var preparing = this._preparingItemContentCell;
        this._preparingItemContentCell = true;
        view.parent._removeView(view);
        view._accordionChildItemIndex = undefined;
        view._accordionItemIndex = undefined;
        this._preparingItemContentCell = preparing;
        this._map.delete(cell);
    };
    Accordion.prototype._removeHeaderContainer = function (cell) {
        var view = cell.view;
        if (!(view.parent instanceof Accordion)) {
            this._removeView(view.parent);
        }
        var preparing = this._preparingHeaderCell;
        this._preparingHeaderCell = true;
        view.parent._removeView(view);
        view._accordionChildItemIndex = undefined;
        this._preparingHeaderCell = preparing;
        this._mapHeader.delete(cell);
    };
    Accordion.prototype._removeFooterContainer = function (cell) {
        var view = cell.view;
        if (!(view.parent instanceof Accordion)) {
            this._removeView(view.parent);
        }
        var preparing = this._preparingFooterCell;
        this._preparingFooterCell = true;
        view.parent._removeView(view);
        view._accordionChildItemIndex = undefined;
        this._preparingFooterCell = preparing;
        this._mapFooter.delete(cell);
    };
    Object.defineProperty(Accordion.prototype, "_childrenCount", {
        get: function () {
            return this._map.size;
        },
        enumerable: true,
        configurable: true
    });
    Accordion.prototype.eachChildView = function (callback) {
        this._map.forEach(function (view, key) {
            callback(view);
        });
    };
    Accordion.prototype.updateNativeIndexes = function (oldIndexes, newIndexes) {
        var _this = this;
        var allowMultiple = String(this.allowMultiple) === 'true';
        if (this._expandedViews)
            if (newIndexes.toString() === Array.from(this._expandedViews.keys()).toString())
                return;
        if (allowMultiple) {
            newIndexes.forEach(function (index) {
                if (!_this._expandedViews.get(index)) {
                    _this._expandedViews.set(index, true);
                    _this._indexSet.addIndex(index);
                }
            });
            this.ios.reloadData();
        }
        else {
            if (newIndexes.length > 0) {
                var index_1 = newIndexes.length - 1;
                var newItems = [index_1];
                this._expandedViews.clear();
                this._indexSet.removeAllIndexes();
                if (!this._expandedViews.get(index_1)) {
                    this._expandedViews.set(index_1, true);
                    this._indexSet.addIndex(index_1);
                    this.ios.reloadData();
                }
            }
        }
    };
    Accordion.prototype.expandAll = function () {
        var length = this.items ? this.items.length : 0;
        var allowMultiple = String(this.allowMultiple) === 'true';
        if (!allowMultiple) {
            this._expandedViews.clear();
            this._indexSet.removeAllIndexes();
            this._expandedViews.set(length - 1, true);
            this._indexSet.addIndex(length - 1);
            this.ios.reloadData();
            return;
        }
        for (var i = 0; i < length; i++) {
            this._expandedViews.set(i, true);
            this._indexSet.addIndex(0);
        }
        this.ios.reloadData();
    };
    Accordion.prototype.collapseAll = function () {
        this._expandedViews.clear();
        this._indexSet.removeAllIndexes();
        this.ios.reloadData();
    };
    Accordion.prototype.collapseItem = function (index) {
        if (this._expandedViews.has(index)) {
            this._expandedViews.delete(index);
            this._indexSet.removeIndex(index);
            this.ios.reloadData();
        }
    };
    Accordion.prototype.expandItem = function (index) {
        var _this = this;
        var reloadSection = function (index) {
            var section = NSMutableIndexSet.alloc().initWithIndex(index);
            _this.ios.reloadSectionsWithRowAnimation(section, 100);
        };
        var removeSection = function (index) {
            var section = NSMutableIndexSet.alloc().initWithIndex(index);
            _this.ios.reloadSectionsWithRowAnimation(section, 4);
        };
        var allowMultiple = String(this.allowMultiple) === 'true';
        if (allowMultiple) {
            if (!this._expandedViews.get(index)) {
                this.itemExpanded(index);
                this._expandedViews.set(index, true);
                this._indexSet.addIndex(index);
            }
            else {
                this._expandedViews.delete(index);
                this._indexSet.removeIndex(index);
                this.itemCollapsed(index);
            }
            reloadSection(index);
            this._selectedIndexesUpdatedFromNative(Array.from(this._expandedViews.keys()));
        }
        else {
            if (this._expandedViews.has(index)) {
                this._expandedViews.delete(index);
                this._indexSet.removeIndex(index);
                this.itemCollapsed(index);
                reloadSection(index);
            }
            else if (this._expandedViews.size > 0) {
                var old = this._expandedViews.keys().next().value;
                this._expandedViews.delete(old);
                this._indexSet.removeIndex(old);
                reloadSection(old);
                this.itemCollapsed(old);
                this._expandedViews.set(index, true);
                this._indexSet.addIndex(index);
                reloadSection(index);
                this.itemExpanded(index);
            }
            else {
                this._expandedViews.set(index, true);
                this._indexSet.addIndex(index);
                this.itemExpanded(index);
                reloadSection(index);
            }
            this._selectedIndexesUpdatedFromNative(Array.from(this._expandedViews.keys()));
        }
    };
    Accordion.prototype.itemIsExpanded = function (index) {
        if (this._expandedViews.has(index)) {
            return this._expandedViews.get(index);
        }
        return false;
    };
    Accordion.prototype.itemExpanded = function (index) {
        this.notify({
            eventName: 'itemExpanded',
            object: observable_1.fromObject({
                value: index
            })
        });
    };
    Accordion.prototype.itemCollapsed = function (index) {
        this.notify({
            eventName: 'itemCollapsed',
            object: observable_1.fromObject({
                value: index
            })
        });
    };
    Accordion.prototype._onHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
        var value = view_1.layout.toDeviceIndependentPixels(this._effectiveHeaderRowHeight);
        var nativeView = this.ios;
        if (value < 0) {
            nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
            nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
            this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
        }
        else {
            nativeView.sectionHeaderHeight = value;
            nativeView.estimatedSectionHeaderHeight = value;
            this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
        }
        if (this.isLoaded) {
            nativeView.delegate = this._delegate;
        }
        _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
    };
    Accordion.prototype._onItemHeaderRowHeightPropertyChanged = function (oldValue, newValue) {
        var value = view_1.layout.toDeviceIndependentPixels(this._effectiveItemHeaderRowHeight);
        var nativeView = this.ios;
        if (value < 0) {
            nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
            nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
            this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
        }
        else {
            nativeView.sectionHeaderHeight = value;
            nativeView.estimatedSectionHeaderHeight = value;
            this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
        }
        if (this.isLoaded) {
            nativeView.delegate = this._delegate;
        }
        _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
    };
    Accordion.prototype._onItemContentRowHeightPropertyChanged = function (oldValue, newValue) {
        var value = view_1.layout.toDeviceIndependentPixels(this._effectiveItemContentRowHeight);
        var nativeView = this.ios;
        if (value < 0) {
            nativeView.rowHeight = UITableViewAutomaticDimension;
            nativeView.estimatedRowHeight = DEFAULT_HEIGHT;
            this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
        }
        else {
            nativeView.rowHeight = value;
            nativeView.estimatedRowHeight = value;
            this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
        }
        if (this.isLoaded) {
            nativeView.delegate = this._delegate;
        }
        _super.prototype._onItemContentRowHeightPropertyChanged.call(this, oldValue, newValue);
    };
    Accordion.prototype._onFooterRowHeightPropertyChanged = function (oldValue, newValue) {
        var value = view_1.layout.toDeviceIndependentPixels(this._effectiveFooterRowHeight);
        var nativeView = this.ios;
        if (value < 0) {
            nativeView.sectionHeaderHeight = UITableViewAutomaticDimension;
            nativeView.estimatedSectionHeaderHeight = DEFAULT_HEIGHT;
            this._delegate = UITableViewDelegateImpl.initWithOwner(new WeakRef(this));
        }
        else {
            nativeView.sectionHeaderHeight = value;
            nativeView.estimatedSectionHeaderHeight = value;
            this._delegate = UITableViewRowHeightDelegateImpl.initWithOwner(new WeakRef(this));
        }
        if (this.isLoaded) {
            nativeView.delegate = this._delegate;
        }
        _super.prototype._onItemHeaderRowHeightPropertyChanged.call(this, oldValue, newValue);
    };
    Accordion.prototype[accordion_common_1.itemHeaderTemplatesProperty.getDefault] = function () {
        return null;
    };
    Accordion.prototype[accordion_common_1.itemHeaderTemplatesProperty.setNative] = function (value) {
        this._itemHeaderTemplatesInternal = new Array(this._defaultItemHeaderTemplate);
        if (value) {
            for (var i = 0, length_1 = value.length; i < length_1; i++) {
                this.ios.registerClassForCellReuseIdentifier(AccordionItemHeaderCell.class(), "item-header-" + value[i].key);
            }
            this._itemHeaderTemplatesInternal = this._itemHeaderTemplatesInternal.concat(value);
        }
        this.refresh();
    };
    Accordion.prototype[accordion_common_1.itemContentTemplatesProperty.getDefault] = function () {
        return null;
    };
    Accordion.prototype[accordion_common_1.itemContentTemplatesProperty.setNative] = function (value) {
        this._itemContentTemplatesInternal = new Array(this._defaultItemContentTemplate);
        if (value) {
            for (var i = 0, length_2 = value.length; i < length_2; i++) {
                this.ios.registerClassForCellReuseIdentifier(AccordionItemContentCell.class(), "item-content-" + value[i].key);
            }
            this._itemContentTemplatesInternal = this._itemContentTemplatesInternal.concat(value);
        }
        this.refresh();
    };
    Accordion.prototype[accordion_common_1.footerTemplatesProperty.getDefault] = function () {
        return null;
    };
    Accordion.prototype[accordion_common_1.footerTemplatesProperty.setNative] = function (value) {
        this._footerTemplatesInternal = new Array(this._defaultFooterTemplate);
        if (value) {
            for (var i = 0, length_3 = value.length; i < length_3; i++) {
                this.ios.registerClassForCellReuseIdentifier(AccordionFooterCell.class(), "footer-" + value[i].key);
            }
            this._footerTemplatesInternal = this._footerTemplatesInternal.concat(value);
        }
        this.refresh();
    };
    Accordion.prototype[accordion_common_1.headerTemplatesProperty.getDefault] = function () {
        return null;
    };
    Accordion.prototype[accordion_common_1.headerTemplatesProperty.setNative] = function (value) {
        this._headerTemplatesInternal = new Array(this._defaultHeaderTemplate);
        if (value) {
            for (var i = 0, length_4 = value.length; i < length_4; i++) {
                this.ios.registerClassForCellReuseIdentifier(AccordionHeaderCell.class(), "header-" + value[i].key);
            }
            this._headerTemplatesInternal = this._headerTemplatesInternal.concat(value);
        }
        this.refresh();
    };
    Accordion.prototype[accordion_common_1.iosEstimatedHeaderRowHeightProperty.getDefault] = function () {
        return DEFAULT_HEIGHT;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedHeaderRowHeightProperty.setNative] = function (value) {
        var nativeView = this.ios;
        var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
        nativeView.estimatedHeaderRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedItemHeaderRowHeightProperty.getDefault] = function () {
        return DEFAULT_HEIGHT;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedItemHeaderRowHeightProperty.setNative] = function (value) {
        var nativeView = this.ios;
        var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
        nativeView.estimatedItemHeaderRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedItemContentRowHeightProperty.getDefault] = function () {
        return DEFAULT_HEIGHT;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedItemContentRowHeightProperty.setNative] = function (value) {
        var nativeView = this.ios;
        var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
        nativeView.estimatedItemContentRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedFooterRowHeightProperty.getDefault] = function () {
        return DEFAULT_HEIGHT;
    };
    Accordion.prototype[accordion_common_1.iosEstimatedFooterRowHeightProperty.setNative] = function (value) {
        var nativeView = this.ios;
        var estimatedHeight = view_1.Length.toDevicePixels(value, 0);
        nativeView.estimatedFooterRowHeight = estimatedHeight < 0 ? DEFAULT_HEIGHT : estimatedHeight;
    };
    __decorate([
        profiling_1.profile,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Accordion.prototype, "onLoaded", null);
    return Accordion;
}(accordion_common_1.AccordionBase));
exports.Accordion = Accordion;
var AccordionItemHeaderCell = (function (_super) {
    __extends(AccordionItemHeaderCell, _super);
    function AccordionItemHeaderCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionItemHeaderCell.initWithEmptyBackground = function () {
        var cell = AccordionHeaderCell.new();
        cell.backgroundColor = null;
        return cell;
    };
    AccordionItemHeaderCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
        var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);
        cell.backgroundColor = null;
        return cell;
    };
    AccordionItemHeaderCell.prototype.willMoveToSuperview = function (newSuperview) {
        var parent = (this.view ? this.view.parent : null);
        if (parent && !newSuperview) {
            parent._removeItemContentContainer(this);
        }
    };
    Object.defineProperty(AccordionItemHeaderCell.prototype, "view", {
        get: function () {
            return this.owner ? this.owner.get() : null;
        },
        enumerable: true,
        configurable: true
    });
    return AccordionItemHeaderCell;
}(UITableViewCell));
exports.AccordionItemHeaderCell = AccordionItemHeaderCell;
var AccordionItemContentCell = (function (_super) {
    __extends(AccordionItemContentCell, _super);
    function AccordionItemContentCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionItemContentCell.initWithEmptyBackground = function () {
        var cell = AccordionItemContentCell.new();
        cell.backgroundColor = null;
        return cell;
    };
    AccordionItemContentCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
        var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);
        cell.backgroundColor = null;
        return cell;
    };
    AccordionItemContentCell.prototype.willMoveToSuperview = function (newSuperview) {
        var parent = (this.view ? this.view.parent : null);
        if (parent && !newSuperview) {
            parent._removeItemContentContainer(this);
        }
    };
    Object.defineProperty(AccordionItemContentCell.prototype, "view", {
        get: function () {
            return this.owner ? this.owner.get() : null;
        },
        enumerable: true,
        configurable: true
    });
    return AccordionItemContentCell;
}(UITableViewCell));
exports.AccordionItemContentCell = AccordionItemContentCell;
var AccordionHeaderCell = (function (_super) {
    __extends(AccordionHeaderCell, _super);
    function AccordionHeaderCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionHeaderCell.initWithEmptyBackground = function () {
        var cell = AccordionHeaderCell.new();
        cell.backgroundColor = null;
        return cell;
    };
    AccordionHeaderCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
        var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);
        cell.backgroundColor = null;
        return cell;
    };
    AccordionHeaderCell.prototype.willMoveToSuperview = function (newSuperview) {
        var parent = (this.view ? this.view.parent : null);
        if (parent && !newSuperview) {
            parent._removeHeaderContainer(this);
        }
    };
    Object.defineProperty(AccordionHeaderCell.prototype, "view", {
        get: function () {
            return this.owner ? this.owner.get() : null;
        },
        enumerable: true,
        configurable: true
    });
    return AccordionHeaderCell;
}(UITableViewCell));
exports.AccordionHeaderCell = AccordionHeaderCell;
var AccordionFooterCell = (function (_super) {
    __extends(AccordionFooterCell, _super);
    function AccordionFooterCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionFooterCell.initWithEmptyBackground = function () {
        var cell = AccordionFooterCell.new();
        cell.backgroundColor = null;
        return cell;
    };
    AccordionFooterCell.prototype.initWithStyleReuseIdentifier = function (style, reuseIdentifier) {
        var cell = _super.prototype.initWithStyleReuseIdentifier.call(this, style, reuseIdentifier);
        cell.backgroundColor = null;
        return cell;
    };
    AccordionFooterCell.prototype.willMoveToSuperview = function (newSuperview) {
        var parent = (this.view ? this.view.parent : null);
        if (parent && !newSuperview) {
            parent._removeFooterContainer(this);
        }
    };
    Object.defineProperty(AccordionFooterCell.prototype, "view", {
        get: function () {
            return this.owner ? this.owner.get() : null;
        },
        enumerable: true,
        configurable: true
    });
    return AccordionFooterCell;
}(UITableViewCell));
exports.AccordionFooterCell = AccordionFooterCell;
var AccordionDataSource = (function (_super) {
    __extends(AccordionDataSource, _super);
    function AccordionDataSource() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccordionDataSource.initWithOwner = function (owner) {
        var dataSource = AccordionDataSource.new();
        dataSource._owner = owner;
        return dataSource;
    };
    AccordionDataSource.prototype.tableViewNumberOfRowsInSection = function (tableView, section) {
        var owner = this._owner.get();
        if (owner._expandedViews.has(section) && owner._expandedViews.get(section)) {
            var parentData = owner && owner.items ? owner._getParentData(section) : [];
            return parentData[owner.childItems] ? (parentData[owner.childItems].length + 1 + (owner._getHasHeader() ? 1 : 0) + (owner._getHasFooter() ? 1 : 0)) : 0;
        }
        else {
            return 1;
        }
    };
    AccordionDataSource.prototype.numberOfSectionsInTableView = function (tableView) {
        var owner = this._owner.get();
        return (owner && owner.items) ? owner.items.length : 0;
    };
    AccordionDataSource.prototype.tableViewCellForRowAtIndexPath = function (tableView, indexPath) {
        var owner = this._owner.get();
        var cell;
        var total = this.tableViewNumberOfRowsInSection(tableView, indexPath.section);
        if (indexPath.row === 0) {
            if (owner) {
                var template = owner._getItemHeaderTemplate(indexPath.section);
                cell = (tableView.dequeueReusableCellWithIdentifier("item-header-" + template.key) || AccordionItemHeaderCell.initWithEmptyBackground());
                owner._prepareItemHeaderCell(cell, indexPath);
                var cellView = cell.view;
                if (cellView && cellView.isLayoutRequired) {
                    var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
                    var rowHeight = owner._effectiveItemHeaderRowHeight;
                    var cellHeight = rowHeight > 0 ? rowHeight : owner.getItemHeaderHeight(indexPath.row);
                    view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
                }
            }
            else {
                cell = AccordionItemHeaderCell.initWithEmptyBackground();
            }
            return cell;
        }
        if (indexPath.row === 1 && owner._getHasHeader()) {
            if (owner) {
                var template = owner._getHeaderTemplate(indexPath.section);
                cell = (tableView.dequeueReusableCellWithIdentifier("header-" + template.key) || AccordionHeaderCell.initWithEmptyBackground());
                owner._prepareHeaderCell(cell, indexPath);
                var cellView = cell.view;
                if (cellView && cellView.isLayoutRequired) {
                    var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
                    var rowHeight = owner._effectiveHeaderRowHeight;
                    var cellHeight = rowHeight > 0 ? rowHeight : owner.getHeaderHeight(indexPath.row);
                    view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
                }
            }
            else {
                cell = AccordionHeaderCell.initWithEmptyBackground();
            }
            return cell;
        }
        if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
            if (owner) {
                var template = owner._getFooterTemplate(indexPath.section);
                cell = (tableView.dequeueReusableCellWithIdentifier("footer-" + template.key) || AccordionFooterCell.initWithEmptyBackground());
                owner._prepareFooterCell(cell, indexPath);
                var cellView = cell.view;
                if (cellView && cellView.isLayoutRequired) {
                    var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
                    var rowHeight = owner._effectiveFooterRowHeight;
                    var cellHeight = rowHeight > 0 ? rowHeight : owner.getFooterHeight(indexPath.row);
                    view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
                }
            }
            else {
                cell = AccordionFooterCell.initWithEmptyBackground();
            }
            return cell;
        }
        if (owner) {
            var template = owner._getItemContentTemplate(indexPath.section, indexPath.row);
            cell = (tableView.dequeueReusableCellWithIdentifier("item-content-" + template.key) || AccordionItemContentCell.initWithEmptyBackground());
            owner._prepareItemContentCell(cell, indexPath);
            var cellView = cell.view;
            if (cellView && cellView.isLayoutRequired) {
                var width = view_1.layout.getMeasureSpecSize(owner.widthMeasureSpec);
                var rowHeight = owner._effectiveItemContentRowHeight;
                var cellHeight = rowHeight > 0 ? rowHeight : owner.getItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (owner._getHasHeader() ? 1 : 0))));
                view_1.View.layoutChild(owner, cellView, 0, 0, width, cellHeight ? cellHeight : 0);
            }
        }
        else {
            cell = AccordionItemContentCell.initWithEmptyBackground();
        }
        return cell;
    };
    AccordionDataSource.ObjCProtocols = [UITableViewDataSource];
    return AccordionDataSource;
}(NSObject));
exports.AccordionDataSource = AccordionDataSource;
var UITableViewRowHeightDelegateImpl = (function (_super) {
    __extends(UITableViewRowHeightDelegateImpl, _super);
    function UITableViewRowHeightDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UITableViewRowHeightDelegateImpl.initWithOwner = function (owner) {
        var delegate = UITableViewRowHeightDelegateImpl.new();
        delegate._owner = owner;
        return delegate;
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewWillDisplayCellForRowAtIndexPath = function (tableView, cell, indexPath) {
        var owner = this._owner.get();
        if (owner && (indexPath.row === owner.items.length - 1)) {
            owner.notify({ eventName: Accordion.loadMoreItemsEvent, object: owner });
        }
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
        var owner = this._owner.get();
        var ios = tableView.cellForRowAtIndexPath(indexPath);
        var total = tableView.numberOfRowsInSection(indexPath.section);
        var args = {
            eventName: '',
            data: null,
            object: owner,
            childIndex: undefined,
            index: null,
            view: null,
            ios: ios,
            android: undefined
        };
        if (indexPath.row === 0) {
            handleTap(owner, indexPath.section, ios);
        }
        else if (indexPath.row === 1 && owner._getHasHeader()) {
        }
        else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
        }
        else {
            var data = owner._getChildData(indexPath.section, indexPath.row);
            args.index = indexPath.section;
            args.childIndex = indexPath.row;
            args.eventName = accordion_common_1.AccordionBase.itemContentTapEvent;
            args.data = data;
            owner.notify(args);
        }
        return indexPath;
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
        tableView.deselectRowAtIndexPathAnimated(indexPath, true);
        return indexPath;
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
        var owner = this._owner.get();
        var total = tableView.numberOfRowsInSection(indexPath.section);
        if (indexPath.row === 0) {
            if (!owner) {
                return tableView.estimatedItemHeaderRowHeight;
            }
            return view_1.layout.toDeviceIndependentPixels(owner._effectiveItemHeaderRowHeight);
        }
        else if (indexPath.row === 1 && owner._getHasHeader()) {
            if (!owner) {
                return tableView.estimatedHeaderRowHeight;
            }
            return view_1.layout.toDeviceIndependentPixels(owner._effectiveHeaderRowHeight);
        }
        else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
            if (!owner) {
                return tableView.estimatedFooterRowHeight;
            }
            return view_1.layout.toDeviceIndependentPixels(owner._effectiveFooterRowHeight);
        }
        else {
            if (!owner) {
                return tableView.estimatedItemContentRowHeight;
            }
            return view_1.layout.toDeviceIndependentPixels(owner._effectiveItemContentRowHeight);
        }
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForFooterInSection = function (tableView, section) {
        return 0;
    };
    UITableViewRowHeightDelegateImpl.prototype.tableViewHeightForHeaderInSection = function (tableView, section) {
        return 0;
    };
    UITableViewRowHeightDelegateImpl.ObjCProtocols = [UITableViewDelegate];
    return UITableViewRowHeightDelegateImpl;
}(NSObject));
exports.UITableViewRowHeightDelegateImpl = UITableViewRowHeightDelegateImpl;
var UITableViewDelegateImpl = (function (_super) {
    __extends(UITableViewDelegateImpl, _super);
    function UITableViewDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UITableViewDelegateImpl.initWithOwner = function (owner) {
        var delegate = UITableViewDelegateImpl.new();
        delegate._owner = owner;
        delegate._measureItemHeaderMap = new Map();
        delegate._measureItemContentMap = new Map();
        delegate._measureHeaderMap = new Map();
        delegate._measureFooterMap = new Map();
        return delegate;
    };
    UITableViewDelegateImpl.prototype.tableViewHeightForRowAtIndexPath = function (tableView, indexPath) {
        var owner = this._owner.get();
        var height;
        var total = tableView.numberOfRowsInSection(indexPath.section);
        if (indexPath.row === 0) {
            if (!owner) {
                return tableView.estimatedItemHeaderRowHeight;
            }
            height = owner.getItemHeaderHeight(indexPath.section);
            if (height === undefined) {
                var template = owner._getItemHeaderTemplate(indexPath.section);
                var cell = this._measureItemHeaderMap.get(template.key);
                if (!cell) {
                    cell = tableView.dequeueReusableCellWithIdentifier("item-header-" + template.key) || AccordionItemHeaderCell.initWithEmptyBackground();
                    this._measureItemHeaderMap.set(template.key, cell);
                }
                height = owner._prepareItemHeaderCell(cell, indexPath);
            }
            return view_1.layout.toDeviceIndependentPixels(height);
        }
        if (indexPath.row === 1 && owner._getHasHeader()) {
            if (!owner) {
                return tableView.estimatedHeaderRowHeight;
            }
            height = owner.getHeaderHeight(indexPath.section);
            if (height === undefined) {
                var template = owner._getHeaderTemplate(indexPath.section);
                var cell = this._measureHeaderMap.get(template.key);
                if (!cell) {
                    cell = tableView.dequeueReusableCellWithIdentifier("header-" + template.key) || AccordionHeaderCell.initWithEmptyBackground();
                    this._measureHeaderMap.set(template.key, cell);
                }
                height = owner._prepareHeaderCell(cell, indexPath);
            }
            return view_1.layout.toDeviceIndependentPixels(height);
        }
        if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
            if (!owner) {
                return tableView.estimatedFooterRowHeight;
            }
            var height_1 = owner.getFooterHeight(indexPath.section);
            if (height_1 === undefined) {
                var template = owner._getFooterTemplate(indexPath.section);
                var cell = this._measureFooterMap.get(template.key);
                if (!cell) {
                    cell = tableView.dequeueReusableCellWithIdentifier("footer-" + template.key) || AccordionFooterCell.initWithEmptyBackground();
                    this._measureFooterMap.set(template.key, cell);
                }
                height_1 = owner._prepareFooterCell(cell, indexPath);
            }
            return view_1.layout.toDeviceIndependentPixels(height_1);
        }
        if (!owner) {
            return tableView.estimatedItemContentRowHeight;
        }
        height = owner.getItemContentHeight(parseInt("" + (indexPath.section + 1) + (indexPath.row - 1 - (owner._getHasHeader() ? 1 : 0))));
        if (height === undefined) {
            var template = owner._getItemContentTemplate(indexPath.section, indexPath.row);
            var cell = this._measureItemContentMap.get(template.key);
            if (!cell) {
                cell = tableView.dequeueReusableCellWithIdentifier("item-content-" + template.key) || AccordionItemContentCell.initWithEmptyBackground();
                this._measureItemContentMap.set(template.key, cell);
            }
            height = owner._prepareItemContentCell(cell, indexPath);
        }
        return view_1.layout.toDeviceIndependentPixels(height);
    };
    UITableViewDelegateImpl.prototype.tableViewWillSelectRowAtIndexPath = function (tableView, indexPath) {
        var owner = this._owner.get();
        var ios = tableView.cellForRowAtIndexPath(indexPath);
        var total = tableView.numberOfRowsInSection(indexPath.section);
        var args = {
            eventName: '',
            data: null,
            object: owner,
            childIndex: undefined,
            index: null,
            view: null,
            ios: ios,
            android: undefined
        };
        if (indexPath.row === 0) {
            handleTap(owner, indexPath.section, ios);
        }
        else if (indexPath.row === 1 && owner._getHasHeader()) {
        }
        else if (indexPath.row !== 0 && indexPath.row === total - 1 && owner._getHasFooter()) {
        }
        else {
            var data = owner._getChildData(indexPath.section, indexPath.row);
            args.index = indexPath.section;
            args.childIndex = indexPath.row;
            args.eventName = accordion_common_1.AccordionBase.itemContentTapEvent;
            args.data = data;
            owner.notify(args);
        }
        return indexPath;
    };
    UITableViewDelegateImpl.prototype.tableViewDidSelectRowAtIndexPath = function (tableView, indexPath) {
        tableView.deselectRowAtIndexPathAnimated(indexPath, true);
        return indexPath;
    };
    UITableViewDelegateImpl.prototype.tableViewHeightForFooterInSection = function (tableView, section) {
        return 0;
    };
    UITableViewDelegateImpl.prototype.tableViewHeightForHeaderInSection = function (tableView, section) {
        return 0;
    };
    UITableViewDelegateImpl.ObjCProtocols = [UITableViewDelegate];
    return UITableViewDelegateImpl;
}(NSObject));
exports.UITableViewDelegateImpl = UITableViewDelegateImpl;
function handleTap(owner, current, view) {
    var data = owner._getParentData(current);
    var _args = {
        eventName: accordion_common_1.AccordionBase.itemHeaderTapEvent,
        data: data,
        object: owner,
        parentIndex: current,
        view: null,
        ios: view,
        android: undefined
    };
    owner.notify(_args);
    var reloadSection = function (index) {
        var section = NSMutableIndexSet.alloc().initWithIndex(index);
        owner.ios.reloadSectionsWithRowAnimation(section, 100);
    };
    var removeSection = function (index) {
        var section = NSMutableIndexSet.alloc().initWithIndex(index);
        owner.ios.reloadSectionsWithRowAnimation(section, 4);
    };
    var allowMultiple = String(owner.allowMultiple) === 'true';
    if (allowMultiple) {
        if (!owner._expandedViews.get(current)) {
            owner.itemExpanded(current);
            owner._expandedViews.set(current, true);
            owner._indexSet.addIndex(current);
        }
        else {
            owner._expandedViews.delete(current);
            owner._indexSet.removeIndex(current);
            owner.itemCollapsed(current);
        }
        reloadSection(current);
        owner._selectedIndexesUpdatedFromNative(Array.from(owner._expandedViews.keys()));
    }
    else {
        if (owner._expandedViews.has(current)) {
            owner._expandedViews.delete(current);
            owner._indexSet.removeIndex(current);
            owner.itemCollapsed(current);
            reloadSection(current);
        }
        else if (owner._expandedViews.size > 0) {
            var old = owner._expandedViews.keys().next().value;
            owner._expandedViews.delete(old);
            owner._indexSet.removeIndex(old);
            reloadSection(old);
            owner.itemCollapsed(old);
            owner._expandedViews.set(current, true);
            owner._indexSet.addIndex(current);
            reloadSection(current);
            owner.itemExpanded(current);
        }
        else {
            owner._expandedViews.set(current, true);
            owner._indexSet.addIndex(current);
            owner.itemExpanded(current);
            reloadSection(current);
        }
        owner._selectedIndexesUpdatedFromNative(Array.from(owner._expandedViews.keys()));
    }
}
var UITableViewImpl = (function (_super) {
    __extends(UITableViewImpl, _super);
    function UITableViewImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.estimatedItemHeaderRowHeight = 0;
        _this.estimatedItemContentRowHeight = 0;
        _this.estimatedHeaderRowHeight = 0;
        _this.estimatedFooterRowHeight = 0;
        return _this;
    }
    UITableViewImpl.initWithOwner = function (owner) {
        var table = UITableViewImpl.new();
        table.owner = owner;
        return table;
    };
    return UITableViewImpl;
}(UITableView));
exports.UITableViewImpl = UITableViewImpl;
//# sourceMappingURL=accordion.ios.js.map